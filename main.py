import os
import sys
import json
import time

from parser import collect_all_final_pages, get_product_details
from uploader import start_upload


OUTPUT_DIR = "output"
DETAILS_DIR = "product_details"


def ensure_dir(path):
    os.makedirs(path, exist_ok=True)


def save_json(data, path):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def collect_pages_flow():
    brand = input("üî§ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Sidi, Furygan): ").strip()
    start_url = f"https://www.jopa.nl/en/{brand.lower()}"

    print(f"\nüîç –°–±–æ—Ä –∫–æ–Ω–µ—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –±—Ä–µ–Ω–¥–∞: {brand}")
    t0 = time.time()

    pages = collect_all_final_pages(start_url, brand)
    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ {time.time() - t0:.2f} —Å–µ–∫.")

    ensure_dir(OUTPUT_DIR)
    out_path = os.path.join(OUTPUT_DIR, f"{brand.lower()}_final_pages.json")
    save_json(pages, out_path)

    print(f"‚úÖ –°—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {out_path}")


def get_products_flow():
    brand = input("üî§ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞: ").strip().lower()
    pages_file = os.path.join(OUTPUT_DIR, f"{brand}_final_pages.json")

    if not os.path.exists(pages_file):
        print(f"‚ùå –§–∞–π–ª {pages_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        sys.exit(1)

    with open(pages_file, "r", encoding="utf-8") as f:
        pages = json.load(f)

    print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü...")
    products = []
    for i, url in enumerate(pages, 1):
        print(f"  {i}/{len(pages)}: {url}")
        products.append(get_product_details(brand, url))

    ensure_dir(DETAILS_DIR)
    out_path = os.path.join(DETAILS_DIR, f"{brand}_products.json")
    save_json(products, out_path)
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {out_path}")


def upload_flow():
    brand = input("üî§ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞: ").strip().lower()
    brand = brand.replace(" ", "-")
    details_file = os.path.join(DETAILS_DIR, f"{brand}_products.json")

    if not os.path.exists(details_file):
        print(f"‚ùå –§–∞–π–ª {details_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        sys.exit(1)

    print(f"üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ {details_file}...")
    start_upload(details_file, brand.replace("-", " ").upper())
    print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def main():
    actions = {
        "1": ("–°–æ–±—Ä–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", collect_pages_flow),
        "2": ("–ü–æ–ª—É—á–∏—Ç—å JSON –ø—Ä–æ–¥—É–∫—Ç–æ–≤", get_products_flow),
        "3": ("–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Å–∞–π—Ç", upload_flow),
    }

    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    for key, (descr, _) in actions.items():
        print(f"  {key}. {descr}")

    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ").strip()
    action = actions.get(choice)
    if not action:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        sys.exit(1)

    _, func = action
    func()


if __name__ == "__main__":
    main()
